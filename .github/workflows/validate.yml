name: Code Quality Validation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # Allow manual triggering
  workflow_dispatch:

jobs:
  validate:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Install development dependencies
        run: |
          pip install black isort flake8 mypy pylint pytest
      
      - name: Check Python syntax and compilation
        run: |
          echo "üêç Checking Python syntax and compilation..."
          python -m py_compile sync.py
          python -m py_compile test_setup.py
          find src -name "*.py" -exec python -m py_compile {} \;
          echo "‚úÖ All Python files compile successfully"
      
      - name: Check code formatting with Black
        run: |
          echo "üñ§ Checking code formatting with Black..."
          black --check --diff --color .
          echo "‚úÖ Code formatting is correct"
      
      - name: Check import sorting with isort
        run: |
          echo "üì¶ Checking import sorting with isort..."
          isort --check-only --diff --color .
          echo "‚úÖ Import sorting is correct"
      
      - name: Lint with flake8
        run: |
          echo "üîç Running flake8 linting..."
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
          echo "‚úÖ Linting passed"
      
      - name: Type checking with mypy
        run: |
          echo "üîç Running mypy type checking..."
          mypy sync.py src/ --ignore-missing-imports --no-strict-optional
          echo "‚úÖ Type checking passed"
      
      - name: Run basic imports test
        run: |
          echo "üß™ Testing basic imports..."
          python -c "
          import sys
          sys.path.insert(0, 'src')
          
          # Test core imports
          from src.config import get_settings
          from src.bluesky_client import BlueskyClient
          from src.mastodon_client import MastodonClient
          from src.sync_orchestrator import SocialSyncOrchestrator
          from src.sync_state import SyncState
          from src.content_processor import ContentProcessor
          
          print('‚úÖ All core modules import successfully')
          
          # Test CLI import
          import click
          print('‚úÖ CLI dependencies available')
          
          # Test API libraries
          import atproto
          import mastodon
          print('‚úÖ API libraries available')
          "
      
      - name: Test configuration loading
        run: |
          echo "‚öôÔ∏è Testing configuration loading..."
          python -c "
          import os
          os.environ['BLUESKY_HANDLE'] = 'test.bsky.social'
          os.environ['BLUESKY_PASSWORD'] = 'test-password'
          os.environ['MASTODON_API_BASE_URL'] = 'https://mastodon.social'
          os.environ['MASTODON_ACCESS_TOKEN'] = 'test-token'
          
          from src.config import get_settings
          settings = get_settings()
          
          assert settings.bluesky_handle == 'test.bsky.social'
          assert settings.mastodon_api_base_url == 'https://mastodon.social'
          print('‚úÖ Configuration loading works correctly')
          "
      
      - name: Test CLI help commands
        run: |
          echo "üñ•Ô∏è Testing CLI help commands..."
          python sync.py --help
          python sync.py sync --help
          python sync.py status --help
          python sync.py config --help
          echo "‚úÖ CLI help commands work"
      
      - name: Validate project structure
        run: |
          echo "üìÅ Validating project structure..."
          
          # Check required files exist
          test -f sync.py && echo "‚úÖ sync.py exists"
          test -f requirements.txt && echo "‚úÖ requirements.txt exists"
          test -f README.md && echo "‚úÖ README.md exists"
          test -f .env.example && echo "‚úÖ .env.example exists"
          
          # Check directory structure
          test -d src && echo "‚úÖ src/ directory exists"
          test -d .github/workflows && echo "‚úÖ .github/workflows/ directory exists"
          test -d docs && echo "‚úÖ docs/ directory exists"
          test -d examples && echo "‚úÖ examples/ directory exists"
          
          # Check core modules
          test -f src/__init__.py && echo "‚úÖ src/__init__.py exists"
          test -f src/config.py && echo "‚úÖ src/config.py exists"
          test -f src/bluesky_client.py && echo "‚úÖ src/bluesky_client.py exists"
          test -f src/mastodon_client.py && echo "‚úÖ src/mastodon_client.py exists"
          test -f src/sync_orchestrator.py && echo "‚úÖ src/sync_orchestrator.py exists"
          test -f src/sync_state.py && echo "‚úÖ src/sync_state.py exists"
          test -f src/content_processor.py && echo "‚úÖ src/content_processor.py exists"
          
          echo "‚úÖ Project structure is valid"

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run security scan with bandit
        run: |
          pip install bandit[toml]
          echo "üîí Running security scan with bandit..."
          bandit -r src/ sync.py -f json -o bandit-report.json || true
          bandit -r src/ sync.py
          echo "‚úÖ Security scan completed"
      
      - name: Upload security scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results-${{ github.run_id }}
          path: bandit-report.json
          retention-days: 30

  dependency-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install safety pip-audit
      
      - name: Check for security vulnerabilities in dependencies
        run: |
          echo "üîç Checking dependencies for security vulnerabilities..."
          
          echo "Running safety check..."
          safety check --json --output safety-report.json || true
          safety check
          
          echo "Running pip-audit..."
          pip-audit --format=json --output=pip-audit-report.json || true
          pip-audit
          
          echo "‚úÖ Dependency security check completed"
      
      - name: Upload dependency scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-scan-results-${{ github.run_id }}
          path: |
            safety-report.json
            pip-audit-report.json
          retention-days: 30
